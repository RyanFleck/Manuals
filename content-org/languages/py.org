#+LAYOUT: docs-manual
#+TITLE: Python
#+SUMMARY: Children, script kiddies, data engineers, and grad students love Python!
#+hugo_base_dir: ../../
#+hugo_section: languages
#+hugo_custom_front_matter: :toc true :summary "Children, script kiddies, data engineers, and grad students love Python!"
#+hugo_custom_front_matter: :chapter true
#+hugo_custom_front_matter: :aliases '("/python" "/pyc" "/py" "/pip")
#+hugo_custom_front_matter: :warning "THIS FILE WAS GENERATED BY OX-HUGO, DO NOT EDIT!!!"
#+PROPERTY: header-args:python :exports both :eval yes :results value scalar
#+hugo_level_offset: 0

# pandoc -o content-org/languages/py.org --from=markdown --to=org  content/languages/py.markdown
# rm content/languages/py.markdown
* Hello Python
:PROPERTIES:
:CUSTOM_ID: hello-python
:END:
#+begin_src python
import antigravity
print("Hello, Python!")
#+end_src

* Why use Python?
:PROPERTIES:
:CUSTOM_ID: why-use-python
:END:
Easy for humans to read, easy to write c extensions, simple for
beginners, complex enough to enable machine learning.

/Stop here, this manual is incomplete!/ New sections will be filled out
soon, when I trace back my steps and re-learn the language properly. For
now, it is an empty shell. I focus primarily on *Python 3.X* in my
writing, though I originally learned Python 2.

Quality Assurance frequently requires one of the following:

1. Excel spreadsheet manipulation.
2. Clicking through user interfaces.
3. Writing documentation based on tabular system information.

All of these use cases can see fantastic acceleration with just a little
bit of automation. I leverage Pandas, Selenium, Docx and Xlrd, and other
modules to move data between Excel Spreadsheets, Word Documents, and
Selenium Actions.

* Environment Setup
:PROPERTIES:
:CUSTOM_ID: environment-setup
:END:
If running windows, you'll need the latest
[[https://www.python.org/downloads/][python installer]]. If on a
GNU/Linux distribution, you'll be able to install =python3-dev= with
your package manager; all tools will be installed automatically. Ensure
that you have the pip package manager installed by running =pip3 -v=.

Most of my python is written either in /VIM/ or /VS Code/ with the
[[https://marketplace.visualstudio.com/items?itemName=himanoa.Python-autopep8][AutoPEP8]]
linter. You'll need /pylint/ installed to use the VS Code extension.

#+begin_src sh
# Install whatever you want.
pip3 install --upgrade pip
pip3 install jupyter pylint pandas --user
# Ensure .local/bin is in your PATH.
#+end_src

* Recommended Learning Path
:PROPERTIES:
:CUSTOM_ID: recommended-learning-path
:END:
If programming for the very first time, I'd recommend taking
CodeCademy's [[https://www.codecademy.com/learn/learn-python-3][/Learn
Python 3/]] course, ignoring the Pro materials.

* Pandas Data Analysis
:PROPERTIES:
:CUSTOM_ID: pandas-data-analysis
:END:
/Pandas/ is a Python library for creating and manipulating /dataframes/,
allowing for easy organization and processing of data. Xlrd enables easy
import of excel files into Pandas Dataframe format, and manipulation is
easy from there.

** Excel Table Container
:PROPERTIES:
:CUSTOM_ID: excel-table-container
:END:
This simple container class holds a spreadsheet and make it easier to
access and manipulate individual sheets. It is part of =rcf_lib.py=

#+begin_src py
class TableGlob:

    filepath = ""

    def __init__(self, name):
        self.name = name

    def importExcelTable(self, filepath):
        if not self.filepath:
            if( os.path.isfile(str(filepath)) and str(filepath[-4:]) == 'xlsx'):
                dbg(e,"good","TblGlb","Data found, importing {0}...".format(filepath))
                self.tablefile = pd.ExcelFile(filepath)
                self.sheetlist = self.tablefile.sheet_names
                dbg(e,"good","TblGlb","Sheets: {0}".format(self.sheetlist))
                self.filepath = filepath
                return True
            else:
                dbg(e,"fail","TblGlb","Path incorrect or table invalid!")
                return False
        else:
            dbg(e,"fail","TblGlb","Table already imported!")
            return False

    def sheets(self):
        return self.sheetlist

    # Returns a pandas dataframe from the excel sheet specified.
    def getdf(self, sheetid):
        if str(sheetid) in self.sheetlist:
            return self.tablefile.parse(sheetid)

    # Mostly for ensuring import was successful.
    def dataShapeTuple(self):
        tuples = []
        for sheetid in self.sheetlist:
            temptable = self.getdf(str(sheetid))
            tuples.append((temptable.shape[0],temptable.shape[1]))

        dbg(e,"good","TblGlb","Data Shape (ROW,COL): {0}".format(tuples))
        return tuples
#+end_src

** Documentation Generator
:PROPERTIES:
:CUSTOM_ID: documentation-generator
:END:
The following code strips data from tables generated by the /Microsoft
TFS/ work tracking bureaucratic engine, and reassembles it into partial
documentation.

#+begin_src py
#!/bin/python3
'''
TFSDataToSectionalTemplateV2.py

2018 04

This program simply strips useful data from an excel file
and structures it as rich text for placement into a word
document for Release Documentation.

Changelog:
V0:
- Began development.
- Implemented excel spreadsheet import.
- Implemented excel spreadsheet processing.
- Implemented command line output.
V1:
- Added docx package.
- Implemented stylized word document export.
V2:
- Added 'column order resilience,' spreadsheet can be less structured.
- Improved table output.
- Added more output and instructions for coworkers.
'''
import os
import pandas as pd
from docx import Document
from docx.shared import Inches


#COLUMN VARIABLES:
cID=0
cITEMTYPE=0
cTITLE=0


#SETUP AND SPREADSHEET IMPORT:
def excelData():
  spreadsheet = pd.ExcelFile('tfsdata.xlsx')
  dataframe = spreadsheet.parse('Sheet1')
  return(dataframe)

def excelOutputSetup():
  writer = pd.ExcelWriter('formattedOutput.xlsx', engine='xlsxwriter')
  return(writer)

print("TFS Excel To Word Template Translator")
print("Ensure this tool is placed in the same directory as 'tfsdata.xlsx'")

if(os.path.isfile('tfsdata.xlsx')):
  print("Data found, processing.")
  data = excelData()
else:
  print("ERROR: 'tfsdata.xlsx' not found! Exiting.")
  exit()



#Parse columns:
print("Data shape: x:"+str(data.shape[0])+" y:"+str(data.shape[1]))
titles=data.columns.tolist()
print(titles)
index=0
for title in titles:
  if(title == 'ID'):
    cID=index
  elif(title == 'Work Item Type'):
    cITEMTYPE=index
  elif(title == 'Title'):
    cTITLE=index
  index+=1



#CREATE DOCUMENT
if(os.path.isfile("Release_Template.docx")):
  os.remove("Release_Template.docx")

doc = Document("redactedT.docx")
styles=doc.styles
heading=doc.add_heading()



#TABLE WRITER
def writeTable():
  if(len(featureDict)>0):
    #heading.style = doc.styles['redacted Heading 2 - No Number']
    doc.add_heading('Related User Stories', level=2)
    table = doc.add_table(rows=1, cols=3)
    table.style = doc.styles['Grid Table 2 Accent 2']
    table.autofit = True
    table.columns[0].width = Inches(0.5)
    table.columns[1].width = Inches(1)
    table.columns[2].width = Inches(6)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'ID'
    hdr_cells[1].text = 'Work Item Type'
    hdr_cells[2].text = 'Title'
    for key in featureDict:
      row_cells = table.add_row().cells
      row_cells[0].text = str(key)
      row_cells[1].text = "User Story"
      row_cells[2].text = featureDict[key]



#SECTION BODY CONTENT WRITER
def fillSection():
  doc.add_paragraph("This is a line of filler body content for a generated redacted document template. TODO: REPLACE ME.")

def fillBody():
  heading.style = doc.styles['redacted Heading 2 - No Number']
  doc.add_heading('Additional Details One', level=2)
  fillSection()
  doc.add_heading('Additional Details Two', level=2)
  fillSection()



#READ THROUGH TABLE AND WRITE DOCUMENT
print("\n\tWRITING DATA TO OUTPUT.DOCX\nREF#\tTITLE\n")

tableLock=True
makeTable=False
featureDict={}

for x in range(0,len(data.index)):
  if(str(data.iloc[x,cITEMTYPE])=="Feature"):
    #Print table for previous dict to doc:
    writeTable()
    fillBody()
    #doc.add_page_break()
    featureDict={}
    print("\n\n"+str(data.iloc[x,cID])+"\t"+str(data.iloc[x,cTITLE])+"\n\t"+("-"*(len(str(data.iloc[x,cTITLE])))))
    doc.add_heading(str(data.iloc[x,cTITLE]), level=1)
    tableLock=False


  elif(tableLock==False and str(data.iloc[x,cITEMTYPE])=="User Story"):
    print(str(data.iloc[x,cID])+"\t"+str(data.iloc[x,cTITLE]))
    featureDict[str(data.iloc[x,cID])] = str(data.iloc[x,cTITLE])
  else:
    tableLock=True



#SAVE AND CLEAN UP
writeTable()
doc.save("redacted_GeneratedReleaseX.docx")
print("\n\tGENERATION COMPLETE - SAVED AS 'redacted_GeneratedReleaseX.docx'")
print("\n\tTODO:\n\t\t-Generate table of contents.\n\t\t-Add full list of user stories.\n\t\t-Rename document.")
#+end_src

* UnitTest
:PROPERTIES:
:CUSTOM_ID: unittest
:END:
*UnitTest* is a simple module to assert that your code is functioning as
designed. If building a library, the following snippet can be added.
When methods are run from an external python file, nothing will happen.
When run directly, the unit tests will run. Quite useful:

#+begin_src py
if __name__ == '__main__':
  unittest.main()
#+end_src

** Multi-Language Testing w/Selenium
:PROPERTIES:
:CUSTOM_ID: multi-language-testing-wselenium
:END:
I wrote the following test a few months ago to test if mulitilingual
pages were accessible.

The program generates and appends unit tests to a class based on
dictionary entries. I'm hoping to adapt it to read from an excel table
and run test cases based on the table content (With the help of a human
QA.)

#+begin_src py
import unittest
import selenium
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
import time
import sys
from pyfiglet import figlet_format
from termcolor import cprint

#Options:
rev = "6.13.2"
debug = True #Set to FALSE if production.
#root = "redacted-cas-01.redacted.com" #the environment to test, without languages or cs addons.
root = "redacted.ca"
chrome_options = Options()
chrome_options.add_argument("--window-size=200,")
chrome_options.add_argument("disable-infobars")
chrome_options.add_argument("--disable-notifications")
#chrome_options.add_argument("--headless") #use when development is finished.

#Global vars
page = ""
headline_EN = "" #Or targeted term.
headline_FR = "" #Or targeted term.

def setposition(x):
    #x.browser.set_window_position("100","600")
    x.browser.set_window_position("50","600")
    return(0)

def setsize(x):
    #x.browser.set_window_size("1250","800") #DESKTOP
    x.browser.set_window_size("1500","800") #DESKTOP
    return(0)

#DEBUG Message functions:
#dm prints a debug message, which is hidden when debug=FALSE.
#dms prints a success message, and is included at the end of each test case.
def dm(msg):
    if (debug):
        print("\n"+'\033[93m'+"DEBUG:   "+'\033[0m'+str(msg), end='')

def dma(msg): #append to dm
    if (debug):
        print(str(msg), end='')

def dms(msg):
    print("\n"+'\033[92m'+"SUCCESS: "+'\033[0m'+str(msg))

#openPage opens the redacted homepage.
def openPage():
    dm("Opening homepage...")
    browser = webdriver.Firefox()
    browser.get('http://www.redacted.ca/')

#EN/FR test case generator:
class TEST007x_LanguageToggle_X(unittest.TestCase):
    dm("Container init.\n")

pagetests = {
             "/your-care": ["Your Care","Vos soins"],
             "/health-info": ["Public Health","sur la"],
             "/science-and-research": ["Inspiring","Faire"],
             "/education": ["Clinical","Formation"],
             "/get-involved": ["Get Involved","Impliquez-vous"],
             "/driving-change": ["Leading","agent du"],
            }

def generatePageTest(name, en, fr):
    def test(self):
        #cprint(figlet_format(str(name), font='small')) #Enable for fun.
        dm("Running w/ page:"+str(name)+" en:"+str(en)+" fr:"+str(fr)+"\n")

        dm("Opening Chrome... ")
        self.browser = webdriver.Chrome(options=chrome_options)
        setsize(self)
        setposition(self)
        dma("Browser open.")

        #Link to global vars
        global page
        global headline_EN
        global headline_FR
        #Assign test vars
        page = name #must begin with "/"
        headline_EN=en
        headline_FR=fr

        dm("Opening "+str(root)+str(page))
        self.browser.get("https://"+str(root)+"/en"+str(page))
        self.browser.execute_script("document.body.style.zoom='100%'")
        self.assertIn(headline_EN, self.browser.title)
        dm("English homepage confirmed.")

        #Click FR toggle.
        dm("Finding FR language toggle.")
        langbutton = self.browser.find_element_by_link_text('FR')
        dm("Clicking element:"+str(langbutton.text)+"... ")
        langbutton.click()
        dma("Click!")

        #Check for french page.
        self.assertIn(headline_FR, self.browser.title)
        dm("French page confirmed.")

        #Click EN toggle.
        dm("Finding EN language toggle.")
        langbutton_en = self.browser.find_element_by_link_text('EN')
        dm("Clicking element:"+str(langbutton_en.text)+"... ")
        langbutton_en.click()
        dma("Click!")

        #Check for english page
        self.assertIn(headline_EN, self.browser.title)
        dm("English page confirmed.")

        dms("Language toggles on "+str(root)+str(page)+" are functional.")

        dm("Teardown.")
        self.browser.close()

    return test

def FdynaStart():
    def test(self):
        dm("Opening Chrome... ")
        self.browser = webdriver.Chrome(options=chrome_options)
        setsize(self)
        setposition(self)
        dma("Browser open.")
    return test

def FdynaEnd():
    def test(self):
        dm("Teardown.")
        self.browser.close()
    return test

for name, params in pagetests.items():
    #dynaStart = FdynaStart()
    #dynaTear = FdynaEnd()
    pageTestFunction = generatePageTest(name, params[0], params[1])
    #setattr(TEST007x_LanguageToggle_X, 'test_{0}_01_Startup'.format(name), dynaStart)
    setattr(TEST007x_LanguageToggle_X, 'test_{0}_02_Run'.format(name), pageTestFunction)
    #setattr(TEST007x_LanguageToggle_X, 'test_{0}_03_Teardown'.format(name), dynaTear)

#Run all tests:
if __name__ == '__main__':
    print('\033[91m'+"\nredacted Test Battery One\nredacted")
    print("[RCF] Version: "+str(rev)+'\033[0m'+"\n\n")
    unittest.main(verbosity=2)
#+end_src

* GUIs.
:PROPERTIES:
:CUSTOM_ID: guis.
:END:
GUIS, or Graphical User Interfaces, are designed to allow the general
public to interact with the software running beneath.

** QT5
:PROPERTIES:
:CUSTOM_ID: qt5
:END:
[[https://build-system.fman.io/pyqt5-tutorial]]

** TK
:PROPERTIES:
:CUSTOM_ID: tk
:END:
By default, Python uses TKinter (TK Interface) to create simple GUIs.
Below is an simple example of a GUI with a window, a label, and a
button.

#+begin_src py
import tkinter as tk
top = tk.Tk()

l = tk.Label(top, text="Tiny GUI")
l.pack()

b = tk.Button(top,text="Button!")
b.pack()

top.title("RCF TK-Interface")
top.resizable(width=False, height=False)
top.geometry('{}x{}'.format(300, 60))
top.mainloop()
#+end_src

* MongoDB
:PROPERTIES:
:CUSTOM_ID: mongodb
:END:
After installing MongoDB and loading
[[http://media.mongodb.org/zips.json]] into the database, (or another
from [[https://github.com/ozlerhakan/mongodb-json-files]],)

I decided to use the sample datasets:

- Students
- Companies
- Restaurants

#+begin_src python
# MongoDB
import pymongo
from pymongo import MongoClient
import pandas as pd
import json

# Pretty Printing - GH: EdwardBetts/pprint_color.py
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import Terminal256Formatter
from pprint import pformat

def cprint(obj):
    print(highlight(pformat(obj), PythonLexer(), Terminal256Formatter()))

print('Mongo version '+ pymongo.__version__)
client = MongoClient('localhost', 27017)
db = client.ryan
collection = db.restaurants
#+end_src

Mongo version 3.7.1

#+begin_src python
cursor = collection.find().sort('type_of_food',pymongo.DESCENDING).limit(3)
for doc in cursor:
    cprint(doc) # This prints the JSON entity.
    print()
#+end_src

** Aggregation
:PROPERTIES:
:CUSTOM_ID: aggregation
:END:
#+begin_src python
# Up for breakfast?

pipeline = [
    {
        "$group":{
            "_id":"$type_of_food",
            "Average Rating":{"$avg":"$rating"},
            "Count":{"$sum":1}
        }
    },
    {
        "$sort":{
            # "Average Rating":-1,
            "Count": -1
        }
    }
]

agg = collection.aggregate(pipeline)
ratings = pd.DataFrame(list(agg))
ratings = ratings.set_index("_id")
ratings.head(10)
#+end_src

#+begin_html
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }

  </style>
#+end_html

#+begin_html
  <table border="1" class="dataframe">
#+end_html

#+begin_html
  <thead>
#+end_html

#+begin_html
  <tr style="text-align: right;">
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

Average Rating

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

Count

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

_id

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </thead>
#+end_html

#+begin_html
  <tbody>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Curry

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

5.036158

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

902

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Pizza

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.914141

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

500

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Chinese

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.893678

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

174

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Kebab

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.885621

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

154

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Fish & Chips

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

5.036697

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

116

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

American

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.617021

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

95

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Turkish

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.918919

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

74

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Lebanese

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.805970

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

70

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Chicken

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.410000

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

53

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Caribbean

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.583333

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

46

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </tbody>
#+end_html

#+begin_html
  </table>
#+end_html

#+begin_src python
ratings.tail()
#+end_src

#+begin_html
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }

  </style>
#+end_html

#+begin_html
  <table border="1" class="dataframe">
#+end_html

#+begin_html
  <thead>
#+end_html

#+begin_html
  <tr style="text-align: right;">
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

Average Rating

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

Count

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

_id

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </thead>
#+end_html

#+begin_html
  <tbody>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Pasta

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

6.0

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

1

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Cakes

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

5.5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

1

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Nigerian

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

1

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Punjabi

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

6.0

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

1

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

Spanish

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

4.5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

1

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </tbody>
#+end_html

#+begin_html
  </table>
#+end_html

Well, that's pretty neat.

Another one:

#+begin_src python
pipeline = [
    {"$match": {"type_of_food":"Breakfast"}}
]

agg = collection.aggregate(pipeline)
breakfast = pd.DataFrame(list(agg))
breakfast
#+end_src

#+begin_html
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }

  </style>
#+end_html

#+begin_html
  <table border="1" class="dataframe">
#+end_html

#+begin_html
  <thead>
#+end_html

#+begin_html
  <tr style="text-align: right;">
#+end_html

#+begin_html
  <th>
#+end_html

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

URL

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

_id

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

address

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

address line 2

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

name

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

outcode

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

postcode

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

rating

#+begin_html
  </th>
#+end_html

#+begin_html
  <th>
#+end_html

type_of_food

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </thead>
#+end_html

#+begin_html
  <tbody>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

0

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-133-take...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14312c7447c3da7051b36

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

133 Fullarton Street

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Irvine

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

133 Takeaway

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

KA12

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

8DG

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Not yet rated

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

1

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-alfiesca...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14312c7447c3da7051d66

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

161 Helen Street

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Glasgow

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Alfies Cafe - Collection Only

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

G51

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

3HD

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Not yet rated

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

2

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-alldaybr...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14312c7447c3da7051dc8

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

227 Lower House Lane

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Liverpool

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

All Day Breakfast Bar

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

L11

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

2SF

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

4.5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

3

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-annescaf...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14312c7447c3da7051f27

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

64 Anne Road

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Smethwick

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Anne's Cafe

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

B66

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

2NY

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

5.5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

4

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-benvenut...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14313c7447c3da70523b7

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Bell Parade

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

West Wickham

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Benvenuti - Collection Only

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

BR4

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

0RH

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Not yet rated

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

5

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-big-dadd...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14313c7447c3da7052475

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

2 Norris Street

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Cheshire

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Big Daddy House

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

WA2

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

7RL

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Not yet rated

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th>
#+end_html

6

#+begin_html
  </th>
#+end_html

#+begin_html
  <td>
#+end_html

http://www.just-eat.co.uk/restaurants-bigphill...

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

55f14313c7447c3da7052499

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Old Club Building

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Tyne and Wear

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Big Phil'lers Deli

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

NE27

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

0EP

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

5

#+begin_html
  </td>
#+end_html

#+begin_html
  <td>
#+end_html

Breakfast

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </tbody>
#+end_html

#+begin_html
  </table>
#+end_html

[[https://stackoverflow.com/questions/5723896/is-there-a-sample-mongodb-database-along-the-lines-of-world-for-mysql][This
Stack Overflow post]] should give you a good idea of how to import the
json on Windows and /nix./

* Deep Learning on Azure
:PROPERTIES:
:CUSTOM_ID: deep-learning-on-azure
:END:
Microsoft now has free learning courses hosted on
[[https://docs.microsoft.com/en-gb/learn/browse/?roles=developer]]

One course is focused on using jupyter notebooks and pytorch with azure
containers.
[[https://docs.microsoft.com/en-gb/learn/modules/interactive-deep-learning/index]]

* Distribute your Python Software
:PROPERTIES:
:CUSTOM_ID: distribute-your-python-software
:END:
[[https://medium.com/dreamcatcher-its-blog/making-an-stand-alone-executable-from-a-python-script-using-pyinstaller-d1df9170e263][PyInstaller?]]
